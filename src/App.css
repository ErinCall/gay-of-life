:root {
  --neutral: #949994;
  --alive:   #ffffff;
  --dead:  #444444;
  --highlight: #8dc1f5;
}


/*
OK SO

This sorta-kinda works:
* Using `display: block` for the header does indeed make the header fit its content, as expected.
* Setting Gameboard's height to 100% makes it 100% of its container, not (100% - height of the
  App-header) like I hoped.
* As expected, just using percentages for height/width creates rectangular cells when the viewport
  is rectangular, so we need a way to match the cell-matrix's aspect ratio to its container's.
  There's some stuff here
  https://stackoverflow.com/questions/35153599/reactjs-get-height-of-an-element that looks
  promising.

*/


.App {
  text-align: center;
  height: 100vh;
  width: 100vw;
  background-color: var(--neutral);
}

.App-header {
  background-color: var(--neutral);
  display: block;
  align-items: center;
  justify-content: center;
  color: black;
  padding: 0.5%;
}

.App-header p {
  margin: 0;
  font-size: 150%;
}

.Gameboard {
  /*width: calc(min(90vh, 100vw));*/
  /*height: calc(min(90vh, 100vw));*/
  height:  100%;
  width: 100%;
  margin-left: auto;
  margin-right: auto;
}

.Control-bar {
  display: inline;
}

.Game-control {
  display: inline;
  padding-left: 0.5em;
  padding-right: 0.5em;
  border-right-style: solid;
  border-right-width: 1px;
}

.Game-control:last-child {
  border-right-style: none;
}

.Flag-button {
  height: 1em;
  width: 1em;
  display: inline;
  border-style: solid;
  border-color: var(--neutral);
  border-width: 0.3em;
  margin-top: 1em;
  margin-bottom: -0.5em;
}

.Flag-button.active {
  border-color: var(--highlight);
  border-radius: 0.25vh;
  border-radius: 0.25vh;
}

.Control-bar input[type=number] {
  appearance: textfield;
  width: 2em;
}
